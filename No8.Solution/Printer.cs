using System.IO;
using No8.Solution.EventAruments;

namespace No8.Solution
{
    using System;

    public abstract class Printer : IEquatable<Printer>, IDisposable
    {
        protected Printer(string model)
        {
            if (string.IsNullOrEmpty(model))
            {
                throw new ArgumentException($"{nameof(model)} must be meaningful");
            }

            this.Model = model;
        }

        public abstract string Name { get; }

        public string Model { get; }

        public event EventHandler<PrinterStartEventArgs> PrintStarted;

        public event EventHandler<PrinterFinishEventArgs> PrintFinished;

        public void Print(Stream stream)
        {
            OnPrintStarted();

            UniquePrint(stream);

            OnPrintFinished();
        }

        protected abstract void UniquePrint(Stream stream);

        protected virtual void OnPrintStarted()
        {
            this.PrintStarted?.Invoke(this, new PrinterStartEventArgs());
        }

        protected virtual void OnPrintFinished()
        {
            this.PrintFinished?.Invoke(this, new PrinterFinishEventArgs());
        }

        #region Equality members generated by JetBrains ReSharper
        public bool Equals(Printer other)
        {
            if (other is null)
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            return string.Equals(Name, other.Name) && string.Equals(Model, other.Model);
        }

        public override bool Equals(object obj)
        {
            if (obj is null)
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != this.GetType())
            {
                return false;
            }

            return Equals((Printer) obj);
        }

        public override int GetHashCode()
        {
            unchecked
            {
                return ((Name != null ? Name.GetHashCode() : 0) * 397) ^ (Model != null ? Model.GetHashCode() : 0);
            }
        }
        #endregion

        public override string ToString()
        {
            return $"{this.Name} {this.Model}";
        }

        protected static void ValidateOnNull<T>(T obj, string name) where T : class
        {
            if (obj is null)
            {
                throw new ArgumentNullException($"{name} is null");
            }
        }

        public virtual void Dispose()
        {

        }
    }
}
